##
##  Copyright (C) 2010-2013  Johns Hopkins University
##
##  This file is part of lesgo.
##
##  lesgo is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##
##  lesgo is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with lesgo.  If not, see <http://www.gnu.org/licenses/>.
##

# This is the settings makefile.
# Use with GNU make.
# Relies on makedepf90 to do dependency lists:
# You can obtain this free program from:
#   http://www.helsinki.fi/~eedelman/makedepf90.html
# New $ARCH entries may be required, depending on your compiler.
# Also requires fpx3 fortran preprocessor available at
#   http://wwwuser.gwdg.de/~jbehren/fpx3.html

SHELL = /bin/bash
FCOMP = gfortran
INCLPATH = -I${HOME}/include -I/usr/local/include
LIBPATH = -L${HOME}/lib -L/usr/local/lib
LIBS = $(LIBPATH) -lrfftw -lfftw 

HOSTNAME = $(shell hostname -s)

#--64-bit mode: may want to do export OBJECT_MODE=64
q64 = no

# Set either double or single precision
USE_DBLPREC = yes

#--Set global DEBUG flag;
#--Still have to set DEBUG in individual routines
DEBUG=no
#--Set global VERBOSE flag;
VERBOSE=no
#--Sets inclusion of development sections
DEVEL=no
# Set extra safety measures 
USE_SAFETYMODE=yes

# Output additional quantities to file. May be useful
# for diagnosing issues
OUTPUT_EXTRA=no

# watch the whitespace here
USE_MPI = yes
USE_OPENMP = no

# Options: DEFAULT, LITTLE, or BIG
WRITE_ENDIAN = DEFAULT

# Read binary files as big_endian or little_endian
# Options: DEFAULT, LITTLE, or BIG
READ_ENDIAN = DEFAULT

# Use binary output for output files
USE_BINARY=no

USE_TURBINES = no 

USE_LVLSET = no
  USE_RNS_LS = no
  USE_CYL_SKEW_LS = no

# Concurrent precursor simulation 
# Requires configuration of two builds: upstream and downstream
USE_CPS=no

# Calc Lag-avg timescale w. error autocorrelation
USE_DYN_TN = no

FPP = fpx3

include Makefile.fpp

# Directory for the .o files
OPATH = obj
# Directory for the .mod files, if your compiler generates them
# May want to just make this 'obj' as well
MPATH = mod

ifeq ($(FCOMP),ifort)

  FPP += -DIFORT

  ifeq ($(USE_MPI), yes)
    FC = mpif90
  else
    FC = ifort
  endif

  LIBS += -ltecryte-intel
  ifeq ($(USE_CYL_SKEW_LS),yes)
    LIBS += -lcgaml-intel
  endif

  #FFLAGS = -O0 -check bounds -g -debug all -traceback
  FFLAGS = -O3 -ip -ftz
  #FFLAGS = -axSSE4.2 -ftz -
  FFLAGS += -warn all -shared-intel
    # Work around for real -> complex dummy array assignment
  # FFLAGS += -warn nointerfaces
  # Fix segmentation faults (stack overflows)
  FFLAGS += -heap-arrays
  #FDEBUG = -g -debug all
  FPROF = -p
  LDFLAGS = -threads
  MODDIR = -I$(MPATH) -module $(MPATH)
  FFLAGS += $(MODDIR) $(INCLPATH)
#  CYLINDER_SKEW_PRE_LS_FFLAGS = $(FFLAGS) -r8
endif

ifeq ($(FCOMP),gfortran)

  FPP += -DGFORTRAN

  ifeq ($(USE_MPI), yes)
    FC = mpif90
  else
    ifeq ($(HOSTNAME), panoramix)
      FC = gfortran44
    else
      FC = gfortran
    endif
  endif

  LIBS += -ltecryte
  ifeq ($(USE_CYL_SKEW_LS),yes)
    LIBS += -lcgaml
  endif

  #FFLAGS = -O0 -fbounds-check
  FFLAGS = -O3 -ffast-math -march=native -funroll-loops
  #FFLAGS = -O3
  #FFLAGS = -O2 -ffree-form -ffixed-line-length-none
  FFLAGS += -Wall
  FDEBUG = -g
  FPROF = -p
  LDFLAGS =
  MODDIR = -I$(MPATH) -J$(MPATH)
  FFLAGS += $(MODDIR) $(INCLPATH)
endif

ifeq ($(FCOMP),xlf)

  FPP += -DXLF

  ifeq ($(USE_MPI), yes)
    FC = mpxlf95_r
  else
    FC = xlf95_r
  endif

  LIBS += -ltecryte-xlf
  ifeq ($(USE_CYL_SKEW_LS),yes)
    LIBS += -lcgaml-xlf
  endif

  #FFLAGS = -qstrict -qsuffix=f=f90 -qsmp -O3 -qreport=smplist
  FFLAGS = -qstrict -qsuffix=f=f90 -O3
  #FFLAGS = -qstrict -qsuffix=f=f90 -O3 -qsmp=omp
  #FFLAGS = -qstrict -qsuffix=f=f90 -O0
  #find out details of how things are stored
  #FFLAGS += -qsource -qattr=full -qxref=full
  #ifeq ($(USE_OPENMP), yes)
    #FFLAGS += -qsmp=omp
  #endif
  #FDEBUG = -g
  #FPROF = -p
  ifeq ($(q64),yes)
    FFLAGS += -q64 -qarch
    LDFLAGS =
    LIBPATH =
    LIBS =
  else
    #LDFLAGS = -bmaxdata:0x80000000 -bmaxstack:0x10000000
    ## NOTE: you'll need to modify this!
    ## or specify on command line
    #LIBPATH = -L${HOME}/fftw/fftw2/lib
    #LIBS = $(LIBPATH) -lsrfftw -lsfftw -lm
    #LIBS = $(LIBPATH) -lrfftw -lfftw -lm
  endif
  MODDIR = -I$(MPATH) -qmoddir=$(MPATH)  # where look for/put .mod files
  FFLAGS += $(MODDIR) $(INCLPATH)
  #-qautodbl=dbl4 -qrealsize=8
endif

ifeq ($(FCOMP),pgfortran)
  
  FPP += -DPGI
  
  ifeq ($(USE_MPI), yes)
    FC = mpif90
  else
    FC = pgfortran
  endif

  LIBS += -ltecryte-pgi
  ifeq ($(USE_CYL_SKEW_LS),yes)
    LIBS += -lcgaml-pgi
  endif

  #FFLAGS = -O3 -fastsse -Mcache_align
  FFLAGS = -fPIC -O0 -Mbounds -Mchkfpstk -Mchkptr -g -C -Minform=warn
  #FFLAGS = -O2 -fPIC
  #FFLAGS = -O3 -ipo
  #FFLAGS = -O3 -ip -ipo -ftz
  #FFLAGS = -axSSE4.2 -xS -ftz -ip -ipo -O3 
  #FFLAGS += -warn all -mcmodel=medium -shared-intel
  FFLAGS += 
  #FDEBUG = -g -debug all
  FPROF = -p
  LDFLAGS = 
  MODDIR = -I$(MPATH) -module $(MPATH)
  FFLAGS += $(MODDIR)
#  CYLINDER_SKEW_PRE_LS_FFLAGS = $(FFLAGS) -r8
endif

ifeq ($(FCOMP),pgf90)
  
  FPP += -DPGI
  
  ifeq ($(USE_MPI), yes)
    FC = mpif90
  else
    FC = pgfortran
  endif
  LIBS += -lcgaml-pgi
  #FFLAGS = -O3 -fastsse -Mcache_align
  FFLAGS = -O0 -Mbounds -Mchkfpstk -Mchkptr -g -C -Minform=warn
  #FFLAGS = -O2 -fPIC
  #FFLAGS = -O3 -ipo
  #FFLAGS = -O3 -ip -ipo -ftz
  #FFLAGS = -axSSE4.2 -xS -ftz -ip -ipo -O3 
  #FFLAGS += -warn all -mcmodel=medium -shared-intel
  FFLAGS += 
  #FDEBUG = -g -debug all
  FPROF = -p
  LDFLAGS = 
  MODDIR = -I$(MPATH) -module $(MPATH)
  FFLAGS += $(MODDIR)
#  CYLINDER_SKEW_PRE_LS_FFLAGS = $(FFLAGS) -r8
endif

ifeq ($(FCOMP),g95)

  ifeq ($(USE_MPI), yes)
    FC = mpif90
  else
    FC = g95
  endif

  LIBS += -ltecryte-g95
  ifeq ($(USE_CYL_SKEW_LS),yes)
    LIBS += -lcgaml-g95
  endif


  FPP += -DG95
  FFLAGS = -O0
  FDEBUG = -g
  FPROF = -p
  LDFLAGS =
  MODDIR = -I $(MPATH)
  FFLAGS += $(MODDIR) $(INCLPATH)
endif


