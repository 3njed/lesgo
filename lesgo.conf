! Input file for lesgo
! 
! All lines beginning with '!' are comments All entries 
! are not case sensitive. Data blocks must begin with 
! '{' and end with '}'; the block name must be on the 
! same line as the entry bracket '{'.
!
! Be sure to preserve the order of the data blocks as some depend on
! others during the read-in process
!

! Domain parameters
DOMAIN {

  Nx = 32
  Ny = 32
  ! Total grid size (stored as nz_tot)
  Nz = 32

  ! Dimensional length scale [m]:
  z_i = 1.0

  ! Non-dimensional domain length
  Lx = 1.0
  Ly = 1.0
  Lz = 1.0
 
}

! Model parameters
MODEL {

  ! Model type: 1->Smagorinsky; 2->Dynamic; 3->Scale dependent
  !             4->Lagrangian scale-sim   5-> Lagragian scale-dep
  sgs_model = 5
  ! Wall damping exponent for Mason model (default 2)
  wall_damp_exp = 2

  ! Timesteps between dynamic Cs updates
  cs_count = 5

  ! When to start dynamic Cs calculations
  dyn_init = 100

  ! Co used in the Mason model for Smagorisky coefficient
  Co = 0.16

  ! Test filter type: 1->cut off 2->Gaussian 3->Top-hat
  ifilter = 1

  ! Dimensional velocity scale (friction velocity) [m] 
  ! u_star is used if coriolis_forcing=.FALSE. and ug is used if
  ! coriolis_forcing=.TRUE.
  u_star = 0.45

  ! von Karman constant  
  vonk = 0.4
  
  ! Coriolis forcing
  ! coriol -> non-dimensional coriolis parameter
  ! ug -> horizontal geostrophic velocity
  ! vg -> transverse geostrophic velocity
  coriolis_forcing = .false.
  coriol = 0.0001
  ug = 1.0
  vg = 0.0

  ! Viscosity models
  sgs = .true. 
  molec = .false. 
  dns_bc = .false.

  ! Dimensional molecular viscosity [m^2/s]
  nu_molec = 1.14e-5
  
}

TIME {

  ! Number of time steps to run simulation
  nsteps = 100000

  ! Set CFL for dynamic time stepping
  ! only used if CFL_DT=yes in Makefile.in
  cfl = 0.05

  ! Set static time step
  ! only used if CFL_DT=no in Makefile.in
  dt = 2.0e-4

  ! Use cumulative time across multiple simulations
  cumulative_time = .true. 

}

! Output parameters
FLOW_COND {

  ! initu = true to read from a file; false to create with random noise
  initu = .false.

  ! initlag = true to initialize cs, FLM & FMM; false to read from vel.out
  inilag = .true.

  ! Upper boundary condition: ubc=0 stress free lid, ubc=1 sponge
  ubc = 0

  ! Lower boundary condition:  'wall', 'stress free'
  lbc_mom = 'wall'

  ! Lower boundary condition, roughness length (non-dimensional)
  zo = 0.0001

  ! Use forced inflow
  inflow = .false.
  ! If inflow is true the following should be set:
  ! position of right end of fringe region, as a fraction of L_x
  fringe_region_end = 1.0
  ! length of fringe region as a fraction of L_x
  fringe_region_len = 0.125
  ! Use uniform inflow instead of concurrent precursor inflow. If false
  ! concurrent precursor inflow will be used and USE_CPS=yes must be set
  ! in Makefile.in. Otherwise if USE_CPS=no then uniform_inflow must be
  ! set to true.
  uniform_inflow = .false.
  ! Specify uniform inflow velocity
  inflow_velocity = 1.0
  ! Force velocity at top and bottom to the inflow velocity
  force_top_bot = .false.

  ! Use mean pressure forcing
  use_mean_p_force = .true.
  ! Specify mean pressure forcing (Typically 1/Lz) 
  ! non-dimensional
  mean_p_force = 1.0 / 1.0 

}

! Solver parameters
OUTPUT {
  
  ! Specify how often to display simulation update
  wbase = 100

  ! Specify of often to write KE to check_ke.out
  nenergy = 100

  ! Specify how often to display Lagrangian CFL condition of dynamic SGS
  ! models
  lag_cfl_count = 1000

  ! Turn on time averaging 
  ! records time-averaged data to files ./output/*_avg.dat
  tavg_calc = .true.
  ! Set when to start time averaging (base on local simulation time step
  ! and not global)
  tavg_nstart = 50000
  ! Set when to stop time averaging
  tavg_nend = 100000

  ! Turn on instantaneous recording at specified points
  point_calc = .true.
  ! Set when to start recording
  point_nstart = 1
  ! Set when to stop recording
  point_nend = 100000
  ! Set number of iterations to skip between recordings
  point_nskip = 10
  ! Specify number of points to record
  point_nloc = 3
  ! Specify location of points 
  point_loc = 0.1, 0.1, 0.1 // 0.5, 0.5, 0.5 // 0.8, 0.8, 0.1

  ! Turn on instantaneous recording in entire domain
  domain_calc = .true.
  ! Set when to start recording
  domain_nstart = 50000
  ! Set when to stop recording
  domain_nend = 100000
  ! Set number of iterations to skip between recordings
  domain_nskip = 10  

  ! Turn on instantaneous recording at specified x-planes
  xplane_calc = .false.
  ! Set when to start recording
  xplane_nstart = 1
  ! Set when to stop recording
  xplane_nend = 100000
  ! Set number of iterations to skip between recordings
  xplane_nskip = 10
  ! Specify number of planes to record
  xplane_nloc = 3
  ! Specify location of planes
  xplane_loc = 0.1, 0.2, 0.3

  ! Turn on instantaneous recording at specified y-planes
  yplane_calc = .false.
  ! Set when to start recording
  yplane_nstart = 1
  ! Set when to stop recording
  yplane_nend = 100000
  ! Set number of iterations to skip between recordings
  yplane_nskip = 10
  ! Specify number of planes to record
  yplane_nloc = 3
  ! Specify location of planes
  yplane_loc = 0.1, 0.2, 0.3

  ! Turn on instantaneous recording at specified z-planes
  zplane_calc = .false.
  ! Set when to start recording
  zplane_nstart = 1
  ! Set when to stop recording
  zplane_nend = 100000
  ! Set number of iterations to skip between recordings
  zplane_nskip = 10
  ! Specify number of planes to record
  zplane_nloc = 3
  ! Specify location of planes
  zplane_loc = 0.1, 0.2, 0.3

  ! Turn on spectra calculations at specified z-planes
  spectra_calc = .false.
  ! Set when to start recording
  spectra_nstart = 1
  ! Set when to stop recording
  spectra_nend = 100000
  ! Specify number of planes to record
  spectra_nloc = 3
  ! Specify location of planes
  spectra_loc = 0.1, 0.2, 0.3
  
}

LEVEL_SET {

  ! Compute global CD based on inflow velocity
  global_CD_calc = .false. 
  
  ! Specify direction of lift direction (drag is assumed in x-direction)
  !  2 when lift direction is y
  !  3 when lift direction is z
  Ldir = 2

  ! Forcing velocity to specified level set BC value
  ! (default .false.)
  vel_BC = .false. 

  ! Specify handling of level set boundary conditions and treatment.
  ! If unsure please use default values as they are the safest.
  ! (default = .false.)
  use_log_profile = .false.       
  ! (default = .false.)
  use_enforce_un = .false.
  ! (default = .true.)        
  physBC = .true.       
  ! (default = .true.)
  use_smooth_tau = .true. 
  ! (default = .false.)
  use_extrap_tau_log = .false.  
  ! (default = .true.)
  use_extrap_tau_simple = .true.  
  ! Only works w/interp_tau; not MPI compliant
  ! wont work w/extra_tau_log
  ! (default = .false.)
  use_modify_dutdn = .false.

  ! Enables scale dependent Cs evaluations (not dynamic evaluation)
  ! Used only when sgs_model = 4
  logical :: lag_dyn_modify_beta = .true.
  
  ! Configures the mode in which SOR smoothing is applied in the IB
  ! 'xy' may be safely used in most cases (must be used for MPI cases)
  ! '3d' not MPI compliant
  character(25) :: smooth_mode = 'xy'

  ! Surface roughness used for level_set surfaces (non-dimensional)
  real (rp) :: zo_level_set = 0.0001

}

RNS {

  rns_ntree = 1 
  rns_tree_layout = 'default'

  !  Weighting/averaging: Off - 0, On - 1
  temporal_weight = 1
  ! Time weighting constant
  Tconst = 1.0_rprec
  ! Time step to start weighting
  weight_nstart = 10000

  !  Explict - 1, Implicit - 2
  temporal_model = 1

  !  Local - 1, Global - 2
  spatial_model = 1

  output_nskip = 10
  CD_ramp_nstep = 5000

  !  Parameters for setting reference regions
  alpha_width = 1.0
  alpha_dist = 0.5

  chi_cutoff = 1.0e-9

}

CYL_SKEW {

  ! Angle in degrees to rotate tree. 
  ! zero degrees points in +x direction
  ! Rotates counter clockwise
  zrot_angle = -90.0

  ! Angle in degrees to 'skew' the cylindrical branches from the +z axis
  skew_angle = 45.0

  ! Create level set bottom surface 
  use_bottom_surf = .true. 
  ! Location along +z direction to create bottom surface (non-dimensional).
  z_bottom_surf = 0.1

  ! Number of trees to generate
  ntree = 1
  ! Locatation of the base of each tree
  tree_location = 3.14, 3.14, 0.1 // 6.28, 6.28, 0.1

  ! Number of generations for each tree
  ngen = 5
  ! Number of resolved generations
  ! When using RNS ngen_reslv < ngen; otherwise ngen_reslv = ngen
  ngen_reslv = 2
  
  ! Number of branches in generator (base structure at generation 0)
  nbranch = 3
  ! Branch diameter (non-dimensional)
  d = 0.5
  ! Branch length along its axis
  l = 1.0
  ! Radial offset to move each branch from the center of the base
  offset = 0.1_rprec

  ! Fractal scale factor ( < 1 )
  scale_fact = 0.5_rprec

  ! Filter the indicator function 
  ! Required when using CYL_SKEW_PRE_LS for generating trees for RNS
  filter_chi = .false.
  ! Size of filter (non-dimensional)
  filt_width = 0.125  

}
