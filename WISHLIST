Copyright (C) 2010-2013  Johns Hopkins University

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.  This file is offered as-is,
without any warranty.


lesgo wish list: let the fun begin


KEY:
(NN) items that have not been implemented
(II) items that are in progress
(CC) items that are complete

ITEMS:

(NN) Convert output to use hdf5 format. This will provide a universal
     format which can be loaded by most visualization software
     packages and scripting/programming languages. It also provides
     binary output which is currently lacking by the tecryte library.

(CC) Check for consistant usage of variables existing on w-grid. There
     are several variables that are written to file that exisit on the
     w-grid - we need to make sure that they are correctly interpolated
     to the uv-grid before they are written.  This applies not only for
     variables written to file but any instance that a w-grid variable
     is operated against a uv-grid variable.

(CC) Create documentation. Good place to start is the README. Would be
     nice to have a formal pdf covering the basic background info, usage
     of lesgo, and any idiosyncrasies that are important to know

(CC) Convert code to use an input file. This would be very nice! The
     code would need to fully implement dynamic allocation of arrays.
     Also need to consider the input format - 1) this could be a custom
     format where all info is read in a strings and using delimiters
     required values could be extract or 2) can use Fortran namelists to
     express the input data using standard Fortran data types (probably
     the best way to go)
 
(CC) Convert code to dynamic memory allocation. This is a good practice
     in general, it will remove issues with the mcmodel for cases with
     large grids, and is a prequesite to use an input file for setting
     parameters. There is a dynamic allocation flag in Makefile.in but
     it seems that only sim_param's are dynamically allocated with it.

(II) Create a standard for MPI syncing. It would be advantageous to have
     a standardized protocol for perfoming MPI sync's. Currently there
     is no direct way to know if an array has been sync'd and therefore
     redundency certainly exists (not good for efficiency). There is
     also the issue with the usage of BOGUS that is tied into the MPI
     sync's. Any time data is output to file or manimulated such as
     interpolation (e.g. w-grid to uv-grid, trilinear, etc.) two things
     must occur: 1) are the BOGUS values zeroed and 2) are the data
     sync'd across over lap nodes.  A standard would provide a means to
     always know the state relative to the position in main.

   
